{"version":3,"sources":["cryptomonedas.png","hooks/useMoneda.js","hooks/useCriptomoneda.js","components/Error.js","components/Formulario.js","components/Cotizacion.js","components/Spinner.js","App.js","reportWebVitals.js","index.js"],"names":["Label","styled","label","Select","select","useMoneda","stateInicial","opciones","useState","state","actualizarState","onChange","e","target","value","map","opcion","codigo","nombre","useCriptomoneda","CoinInfo","Name","FullName","Id","MensajeError","p","Error","mensaje","Boton","input","Formulario","guardarCriptomoneda","guardarMoneda","modificarFotoInicial","listacripto","guardarCriptomonedas","error","guardarError","hayCambiosDeSelecciones","moneda","SelectMonedas","criptomoneda","SelectCripto","useEffect","a","axios","get","resultado","data","Data","consultarAPI","onSubmit","preventDefault","setTimeout","type","ResultadoDiv","div","Info","Precio","Cotizacion","Object","keys","length","PRICE","HIGHDAY","LOWDAY","CHANGEPCT24HOUR","LASTUPDATE","Spinner","className","Contenedor","Imagen","img","Heading","h1","CloseButn","button","App","guardarResultado","cargando","guardarCargando","fotoInicial","url","DISPLAY","cotizarCriptomoneda","componente","onClick","infoDisplay","src","imagen","alt","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.27757b45.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/cryptomonedas.51f1d2ed.png\";","import React, { Fragment, useState } from 'react';\n// import { act } from 'react-dom/test-utils';\nimport styled from '@emotion/styled';\n\nconst Label = styled.label`\n    font-family: 'Bebas Neue', cursive;\n    \n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.1rem;\n    display: block;\n    margin-top: 1rem;\n    @media (min-width: 1100px){\n        margin-top: 2rem;\n        font-size: 2.4rem;\n    }\n`;\n\nconst Select = styled.select`\n    width: 100%;\n    display: block;\n    padding: .5rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n    @media (min-width: 1100px){\n        padding: 1rem;\n    }\n`;\n\nconst useMoneda = (label, stateInicial, opciones) => {\n\n    //state de nuestro custom hook (donde se guarda la moneda elegida)\n    const [state, actualizarState] = useState(stateInicial);\n\n    const Seleccionar = () => (\n        <Fragment>\n\n            <Label>{label}\n            </Label>\n            <Select\n                onChange={e => actualizarState(e.target.value)}\n                value={state}\n            >\n                <option value=\"\">-- Seleccione --</option>\n                {opciones.map(opcion => (\n                    <option key={opcion.codigo} value={opcion.codigo}>{opcion.nombre}</option>\n                ))}\n            </Select>\n        </Fragment>\n    );\n\n    //retornar state, interfaz y func que modifica el state.\n    return [state, Seleccionar, actualizarState];\n}\n\n\nexport default useMoneda;\n","import React, { Fragment, useState } from 'react';\n// import { act } from 'react-dom/test-utils';\nimport styled from '@emotion/styled';\n\nconst Label = styled.label`\n    font-family: 'Bebas Neue', cursive;\n    \n    color: #FFF;\n    text-transform: uppercase;\n    font-weight: bold;\n    font-size: 2.1rem;\n    margin-top: 1rem;\n    display: block;\n    @media (min-width: 1100px){\n        margin-top: 2rem;\n        font-size: 2.4rem;\n    }\n\n`;\n\nconst Select = styled.select`\n    width: 100%;\n    display: block;\n    padding: .5rem;\n    -webkit-appearance: none;\n    border-radius: 10px;\n    border: none;\n    font-size: 1.2rem;\n    @media (min-width: 1100px){\n        padding: 1rem;\n    }\n\n`;\n\nconst useCriptomoneda = (label, stateInicial, opciones) => {\n\n    // console.log(opciones);\n\n    //state de nuestro custom hook (donde se guarda la criptomoneda elegida)\n    const [state, actualizarState] = useState(stateInicial);\n\n    //componente anidado en nuestro state\n    const SelectCripto = () => (\n        \n        <Fragment>\n\n            <Label>{label}\n            </Label>\n            <Select\n                onChange={e => actualizarState(e.target.value)}\n                value={state}\n            >\n                {/* en opciones viene con listacripto desde formulario */}\n                <option value=\"\">-- Seleccione --</option>\n                {opciones.map(opcion => (\n                    <option key={opcion.CoinInfo.Id} value={opcion.CoinInfo.Name}>{opcion.CoinInfo.FullName}</option>\n                ))}\n            </Select>\n        </Fragment>\n    );\n\n    //retornar state, interfaz y func que modifica el state.\n    return [state, SelectCripto, actualizarState];\n}\n\n\nexport default useCriptomoneda;\n","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\n\nconst MensajeError = styled.p`\n    background-color: #b7322c;\n    padding: 1rem;\n    color: #FFF;\n    font-size: 30px;\n    text-transform: uppercase;\n    font-weight: bold;\n    text-align: center;\n    font-family: 'Bebas Neue', cursive;\n`;\n\nconst Error = ({mensaje}) => {\n    return (\n        <MensajeError>{mensaje}</MensajeError>\n      );\n}\n\nError.propTypes = {\n    mensaje: PropTypes.string.isRequired\n}\n\nexport default Error;","import React, {useEffect, useState} from 'react';\nimport styled from '@emotion/styled';\nimport useMoneda from '../hooks/useMoneda';\nimport useCriptomoneda from '../hooks/useCriptomoneda';\nimport axios from 'axios';\nimport Error from './Error';\n\nimport PropTypes from 'prop-types';\n\nconst Boton = styled.input`\n    margin-top: 20px;\n    font-weight: bold;\n    \n    font-size: 20px;\n    padding:10px;\n    background-color: #66a2fe;\n    border: none;\n    width: 100%;\n    border-radius: 10px;\n    color: #FFF;\n    transition: background-color .3s ease;\n\n    &:hover {\n        background-color: #326AC0;\n        cursor:pointer;\n    }\n`;\nconst Formulario = ({ guardarCriptomoneda, guardarMoneda, modificarFotoInicial}) => {\n    \n    const [listacripto, guardarCriptomonedas] = useState([]);\n    const [ error, guardarError] = useState(false);\n\n    let hayCambiosDeSelecciones = false;\n\n    //argumento para nuestro state useMoneda\n    const MONEDAS = [\n        {codigo: 'USD', nombre: 'Dolar de Estados Unidos'},\n        {codigo: 'MXN', nombre: 'Peso Mexicano'},\n        {codigo: 'EUR', nombre: 'Euro'},\n        {codigo: 'GBP', nombre: 'Libra Esterlina'},\n    ]\n\n    //utilizar useMoneda\n    const [moneda, SelectMonedas] = useMoneda('Elige tu moneda', '', MONEDAS);\n\n    //utilizar useCriptomoneda\n    const [criptomoneda, SelectCripto] = useCriptomoneda('Elige tu Criptomoneda' , '', listacripto);\n\n    //ejectuar llamado a la api\n    useEffect(() => {\n        const consultarAPI = async () => {\n            //obtenemos los nombres de las cryptomonedas presentadas\n            //por la api\n            const url = 'https://min-api.cryptocompare.com/data/top/mktcapfull?limit=10&tsym=USD';\n\n            const resultado = await axios.get(url);\n\n            // pasamos data obtenida de la api a listacripto\n            // la cual es 3er argumento de state useCriptomoneda\n            guardarCriptomonedas(resultado.data.Data);\n        }\n        consultarAPI();\n    }, []);\n\n    useEffect(() => {\n        // eslint-disable-next-line\n        hayCambiosDeSelecciones = true\n    }, [moneda, criptomoneda]);\n\n    //cuando el usuario hace submit\n    const cotizarMoneda = e => {\n        e.preventDefault();\n\n \n        //validar si ambos campos estan llenos\n        if(moneda === '' || criptomoneda === '') {\n            guardarError(true);\n            return;\n        }\n        //pasar los datos al componente principal\n        guardarError(false);\n\n        //reemplazar la foto inicial por el resultado\n        if(hayCambiosDeSelecciones){\n        //  ralentizar algunos segundos para ejecutar \n        //  modificarFotoInicial(false);\n            setTimeout(() => {\n                modificarFotoInicial(false);\n            }, 3000);\n\n        } else {\n        //no ralentizar y mostrar inmediatamente\n            modificarFotoInicial(false);\n        }\n\n        guardarMoneda(moneda);\n        guardarCriptomoneda(criptomoneda);\n    }\n\n    return (  \n\n        <form\n            onSubmit={cotizarMoneda}\n        >\n            {error ? <Error mensaje=\"Todos los campos son obligatorios\"/>: null}\n\n                {/* //componente de state useMoneda */}\n                <SelectMonedas />\n\n                {/* //componente de state useCriptomoneda */}\n                <SelectCripto  />\n                <Boton\n                    type=\"submit\"\n                    value=\"Calcular\"                \n                    />\n        </form>\n    );\n}\n \n\nFormulario.propTypes = {\n    guardarCriptomoneda: PropTypes.func.isRequired,\n    guardarMoneda: PropTypes.func.isRequired\n}\n\nexport default Formulario;","import React from 'react';\nimport styled from '@emotion/styled';\nimport PropTypes from 'prop-types';\n\nconst ResultadoDiv = styled.div`\n    color: #FFF; \n    font-family: Arial, Helvetica, sans-serif;\n\n    max-width: 80%;\n    margin-top: 5rem;\n    margin-left: 6rem;\n    @media (min-width:1100px){\n         max-width: 100%;\n         margin-left: 0;\n     }\n\n`;\n\nconst Info = styled.p`\n    font-size: 18px;\n    span {\n        font-weight: bold;\n        margin-left: 60px;\n        display: block;\n        padding: 0.5rem 0;\n    }\n`;\n\nconst Precio = styled.p`\n    font-size: 35px;\n    margin-bottom: 1.7rem;\n    span{\n        display: block;\n        font-weight: bold;\n        margin-left: 60px;\n        padding: 0.5rem 0;\n    }\n`;\n\n\nconst Cotizacion = ({ resultado}) => {\n    if(Object.keys(resultado).length === 0) return null;\n\n     \n    return (\n        <ResultadoDiv>\n            <Precio>El precio es:  <span>{resultado.PRICE}</span></Precio>\n            <Info>Precio más alto del día: <span>{resultado.HIGHDAY}</span></Info>\n            <Info>Precio más bajo del día: <span>{resultado.LOWDAY}</span></Info>\n            <Info>Variación de últimas 24 horas: <span>{resultado.CHANGEPCT24HOUR}</span></Info>\n            <Info>Última Actualización: <span>{resultado.LASTUPDATE}</span></Info>\n        </ResultadoDiv>\n      );\n}\n \nCotizacion.propTypes = {\n    resultado: PropTypes.object.isRequired,\n}\n\nexport default Cotizacion;","import React from 'react';\nimport './Spinner.css';\n\nconst Spinner = () => {\n    return (\n        <div className=\"sk-chase\">\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n            <div className=\"sk-chase-dot\"></div>\n        </div>\n    );\n}\n\nexport default Spinner;","import {useState, useEffect} from 'react';\nimport styled from '@emotion/styled';\nimport imagen from './cryptomonedas.png';\nimport Formulario from './components/Formulario';\nimport axios from 'axios';\nimport Cotizacion from './components/Cotizacion';\n\nimport Spinner from './components/Spinner';\n\nconst Contenedor = styled.div`\n    max-width: 900px;\n    margin: 0 auto;\n    @media (min-width:992px){\n\n        display: grid;\n        grid-template-columns: repeat(2, 1fr);\n        column-gap: 2rem;\n    }\n`;\n\nconst Imagen = styled.img`\n    max-width: 80%;\n    margin-top: 5rem;\n    margin-left: 4rem;\n    @media (min-width:1100px){\n         max-width: 100%;\n         margin-left: 0;\n     }\n`;\n\nconst Heading = styled.h1`\n    font-family: 'Bebas Neue', cursive;\n    color: #FFF;\n    text-align: left;\n    font-weight: 700;\n    font-size: 50px;\n    margin-bottom: 20px;\n    margin-top: 80px;\n    &::after {\n        content: '';\n        width: 100px;\n        height: 6px;\n        background-color: #66A2FE;\n        display: block;\n    }\n    @media (min-width:1100px){\n        margin-bottom: 50px;\n    }\n`;\n\nconst CloseButn = styled.button`\n    border-radius: 50%;\n    border: none;\n    padding: 0.5rem 0.8rem;\n    color: white;\n    background-color: red;\n    margin-left: 150px;\n    &:hover{\n        font-weight: bold;\n    }\n `;\n\nfunction App() {\n    \n    const [moneda, guardarMoneda] =useState('');\n    const [criptomoneda, guardarCriptomoneda] = useState('');\n    const [resultado, guardarResultado] = useState({});\n    const [cargando, guardarCargando]  = useState(false);\n    const [fotoInicial, modificarFotoInicial] = useState(true);\n\n    useEffect(() => {\n        //evitamos la ejecución la primera vez\n\n        const cotizarCriptomoneda = async () => {\n            if (moneda === '') return;\n\n            //consultar la api por la cotizacion\n            const url = `https://min-api.cryptocompare.com/data/pricemultifull?fsyms=${criptomoneda}&tsyms=${moneda}`;\n            const resultado = await axios.get(url);\n            \n\n            //remove photo for display info\n            modificarFotoInicial(false);\n\n            //mostrar spinner\n            guardarCargando(true);\n\n            //ocultar el spinner y mostrar el resultado\n            //emulamos tiempo de operacion de calculo de cotizacion\n            setTimeout(() => {\n                //cambiar el estado de cargando\n                guardarCargando(false);\n\n                //accediendo a atributos criptomoneda y luego moneda de resultado obtenemos \n                //los valores del objeto anticipandonos para evitar tener que tratar con esto //cuando rendericemos el objeto\n                guardarResultado(resultado.data.DISPLAY[criptomoneda][moneda]);\n            }, 3000);\n    \n        }\n        cotizarCriptomoneda();\n    }, [moneda, criptomoneda]);\n\n    //mostrar spinner o resultado\n    const componente = (cargando) ? <Spinner /> :\n    <div>\n         <Cotizacion\n             resultado={resultado}\n        />\n            <CloseButn  onClick={() => modificarFotoInicial(true)} type='button'>X</CloseButn>\n    </div>\n        ;\n\n    //mostrar foto inicial o operaciones\n    let infoDisplay = (fotoInicial) ? <Imagen\n        src={imagen}\n        alt=\"imagen crypto\"\n    />\n        : componente;\n\n\n    return (\n    <Contenedor>    \n        <div>\n            {infoDisplay}\n        </div>\n        <div className=\" laptopfriendly\">\n            <Heading>Cotiza Criptomonedas al Instante</Heading>\n            <Formulario \n                guardarMoneda={guardarMoneda}\n                guardarCriptomoneda={guardarCriptomoneda}\n                modificarFotoInicial={modificarFotoInicial}\n            />\n            {/* {componente} */}\n        </div>\n    </Contenedor>\n);\n}\n\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}